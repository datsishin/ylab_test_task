# Импортируем модули для генерации комбинаций и для аннотаций типовimport itertoolsfrom typing import List# Задаем координаты точек маршрутаstart_point = (0, 2)point_1 = (2, 5)point_2 = (5, 2)point_3 = (6, 6)point_4 = (8, 3)finish_point = (0, 2)# Формируем список точек для обходаlist_of_point = [point_1, point_2, point_3, point_4]# Генерируем список всевозможных вариантов обхода заданных точекperm = itertools.permutations(list_of_point)perm_list = [*perm]# Вводим пустую переменную для сохранения полной длины дистанцииfull_distance: List[float] = []# Проходим циклом по каждому варианту обхода точекfor t in range(len(perm_list) - 1):    total_distance: List[float] = []    # При помощи цикла последовательно вычисляем расстояния между точками    for j in range(len(perm_list[0]) - 1):        x = (perm_list[t][j + 1][0] - perm_list[t][j][0]) ** 2        y = (perm_list[t][j + 1][1] - perm_list[t][j][1]) ** 2        distance: float = (x + y) ** 0.5        # Сохраняем расстояние между точками в список        total_distance.append(distance)    # Вычисляем расстояние между точкой начала маршрута и первой точкой    start_x = (perm_list[t][0][0] - start_point[0]) ** 2    start_y = (perm_list[t][0][1] - start_point[1]) ** 2    start_distance: float = (start_x + start_y) ** 0.5    # Вычисляем расстояние между точкой конца маршрута и последней точкой    finish_x = (finish_point[0] - perm_list[t][-1][0]) ** 2    finish_y = (finish_point[1] - perm_list[t][-1][1]) ** 2    finish_distance: float = (finish_x + finish_y) ** 0.5    # Обнуляем список при каждом проходе по циклу и складываем расстояния между всеми точками    sum_distance: float = 0    for i in range(len(total_distance)):        sum_distance += total_distance[i]    # Получаем полное расстояние маршрута от точки старта до точки финиша    total: float = start_distance + sum_distance + finish_distance    full_distance.append(total)# Определяем самый короткий маршрут из всех возможныхshort_track: int = full_distance.index(min(full_distance))print(f'Самый короткий маршрут, начинающийся и заканчивающийся в точке {start_point},'      f' и проходящий через точки {perm_list[short_track]}, равен {round(min(full_distance), 2)}')